<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.WorkManMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加工作人员记录 -->
	<insert id="addWorkMan" parameterType="workMan">
		insert into t_workMan(workUserName,password,name,gender,birthDate,workManPhoto,telephone,address,workManMemo) values 
		(#{workUserName},#{password},#{name},#{gender},#{birthDate},#{workManPhoto},#{telephone},#{address},#{workManMemo})
	</insert>

	<!-- 按照查询条件分页查询工作人员记录 -->
	<select id="queryWorkMan" resultMap="workManMap" >
		select t_workMan.* from t_workMan ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="workManMap" type="workMan">
        <id property="workUserName" column="workUserName" />
    </resultMap>

    <!-- 按照查询条件查询所有工作人员记录 -->
	<select id="queryWorkManList" resultMap="workManMap" >
		select t_workMan.* from t_workMan ${where}
	</select>

    <!-- 按照查询条件的工作人员记录数 -->
	<select id="queryWorkManCount" resultType="int">
		select count(*) from t_workMan ${where}
	</select>

	<!-- 根据主键查询某个工作人员记录 -->
	<select id="getWorkMan" parameterType="string" resultMap="workManMap">
		select * from t_workMan where t_workMan.workUserName = #{workUserName}
	</select>

	<!-- 更新工作人员记录 -->
	<update id="updateWorkMan" parameterType="workMan">
		update t_workMan set password=#{password},name=#{name},gender=#{gender},birthDate=#{birthDate},workManPhoto=#{workManPhoto},telephone=#{telephone},address=#{address},workManMemo=#{workManMemo} where workUserName = #{workUserName}
	</update>

	<!-- 删除工作人员记录 -->
	<delete id="deleteWorkMan" parameterType="string">
		delete from t_workMan where workUserName=#{workUserName}
	</delete>

</mapper>
